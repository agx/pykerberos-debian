From: =?utf-8?q?Guido_G=C3=BCnther?= <agx@sigxcpu.org>
Date: Sat, 22 Aug 2015 11:51:13 +0200
Subject: Add KDC authenticity verification support (CVE-2015-3206)

Obtained from upstream, ignoring white-space changes, URL:
https://github.com/02strich/pykerberos/commit/02d13860b25fab58e739f0e000bed0067b7c6f9c
---
 pysrc/kerberos.py   |  4 +++-
 src/kerberos.c      |  5 +++--
 src/kerberosbasic.c | 41 ++++++++++++++++++++++++++++++++++-------
 src/kerberosbasic.h |  2 +-
 4 files changed, 41 insertions(+), 11 deletions(-)

diff --git a/pysrc/kerberos.py b/pysrc/kerberos.py
index 8c6a712..4fa9df3 100644
--- a/pysrc/kerberos.py
+++ b/pysrc/kerberos.py
@@ -27,7 +27,7 @@ class BasicAuthError(KrbError):
 class GSSError(KrbError):
     pass
 
-def checkPassword(user, pswd, service, default_realm):
+def checkPassword(user, pswd, service, default_realm, verify=True):
     """
     This function provides a simple way to verify that a user name and password match
     those normally used for Kerberos authentication. It does this by checking that the
@@ -49,6 +49,8 @@ def checkPassword(user, pswd, service, default_realm):
     @param default_realm: a string containing the default realm to use if one is not
         supplied in the user argument. Note that Kerberos realms are normally all
         uppercase (e.g., 'EXAMPLE.COM').
+    @param verify:        a boolean flagging KDC verification to enabled or disabled
+                          (default: True).
     @return:              True if authentication succeeds, False otherwise.
     """
 
diff --git a/src/kerberos.c b/src/kerberos.c
index 740d9e1..1243b59 100644
--- a/src/kerberos.c
+++ b/src/kerberos.c
@@ -35,12 +35,13 @@ static PyObject *checkPassword(PyObject *self, PyObject *args)
     const char *pswd = NULL;
     const char *service = NULL;
     const char *default_realm = NULL;
+    int verify = 1;
     int result = 0;
 
-    if (!PyArg_ParseTuple(args, "ssss", &user, &pswd, &service, &default_realm))
+    if (!PyArg_ParseTuple(args, "ssss|b", &user, &pswd, &service, &default_realm, &verify))
         return NULL;
 
-    result = authenticate_user_krb5pwd(user, pswd, service, default_realm);
+    result = authenticate_user_krb5pwd(user, pswd, service, default_realm, verify);
 
     if (result)
         return Py_INCREF(Py_True), Py_True;
diff --git a/src/kerberosbasic.c b/src/kerberosbasic.c
index 0c7bdd7..27d7c4f 100644
--- a/src/kerberosbasic.c
+++ b/src/kerberosbasic.c
@@ -26,9 +26,9 @@
 extern PyObject *BasicAuthException_class;
 static void set_basicauth_error(krb5_context context, krb5_error_code code);
 
-static krb5_error_code verify_krb5_user(krb5_context context, krb5_principal principal, const char *password, krb5_principal server);
+static krb5_error_code verify_krb5_user(krb5_context context, krb5_principal principal, const char *password, krb5_principal server, unsigned char verify);
 
-int authenticate_user_krb5pwd(const char *user, const char *pswd, const char *service, const char *default_realm)
+int authenticate_user_krb5pwd(const char *user, const char *pswd, const char *service, const char *default_realm, unsigned char verify)
 {
     krb5_context    kcontext = NULL;
     krb5_error_code code;
@@ -87,7 +87,7 @@ int authenticate_user_krb5pwd(const char *user, const char *pswd, const char *se
         goto end;
     }
 
-    code = verify_krb5_user(kcontext, client, pswd, server);
+    code = verify_krb5_user(kcontext, client, pswd, server, verify);
 
     if (code)
     {
@@ -113,10 +113,11 @@ end:
 }
 
 /* Inspired by krb5_verify_user from Heimdal */
-static krb5_error_code verify_krb5_user(krb5_context context, krb5_principal principal, const char *password, krb5_principal server)
+static krb5_error_code verify_krb5_user(krb5_context context, krb5_principal principal, const char *password, krb5_principal server, unsigned char verify)
 {
     krb5_creds creds;
-    krb5_get_init_creds_opt gic_options;
+    krb5_get_init_creds_opt *gic_options;
+    krb5_verify_init_creds_opt vic_options;
     krb5_error_code ret;
     char *name = NULL;
 
@@ -131,17 +132,43 @@ static krb5_error_code verify_krb5_user(krb5_context context, krb5_principal pri
         free(name);
     }
 
-    krb5_get_init_creds_opt_init(&gic_options);
-    ret = krb5_get_init_creds_password(context, &creds, principal, (char *)password, NULL, NULL, 0, NULL, &gic_options);
+    // verify passed in server principal if needed
+    if (verify) {
+         ret = krb5_unparse_name(context, server, &name);
+         if (ret == 0) {
+#ifdef PRINTFS
+             printf("Trying to get TGT for service %s\n", name);
+#endif
+             free(name);
+         }
+    }
+
+    // verify password
+    krb5_get_init_creds_opt_alloc(context, &gic_options);
+    ret = krb5_get_init_creds_password(context, &creds, principal, (char *)password, NULL, NULL, 0, NULL, gic_options);
     if (ret)
     {
         set_basicauth_error(context, ret);
         goto end;
     }
 
+    // verify response authenticity
+    if (verify) {
+        krb5_verify_init_creds_opt_init(&vic_options);
+        krb5_verify_init_creds_opt_set_ap_req_nofail(&vic_options, 1);
+        ret = krb5_verify_init_creds(context, &creds, server, NULL, NULL, &vic_options);
+        if (ret) {
+            set_basicauth_error(context, ret);
+        }
+    }
+
 end:
+    // clean up
     krb5_free_cred_contents(context, &creds);
 
+    if (gic_options)
+        krb5_get_init_creds_opt_free(context, gic_options);
+
     return ret;
 }
 
diff --git a/src/kerberosbasic.h b/src/kerberosbasic.h
index 0a91455..f3cfce5 100644
--- a/src/kerberosbasic.h
+++ b/src/kerberosbasic.h
@@ -20,4 +20,4 @@
 
 #define krb5_get_err_text(context,code) error_message(code)
 
-int authenticate_user_krb5pwd(const char *user, const char *pswd, const char *service, const char *default_realm);
+int authenticate_user_krb5pwd(const char *user, const char *pswd, const char *service, const char *default_realm, unsigned char verify);
